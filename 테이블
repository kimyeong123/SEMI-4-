-- 1. DROP SEQUENCES (순서 무관)
DROP SEQUENCE member_seq;
DROP SEQUENCE product_seq;
DROP SEQUENCE review_seq;
DROP SEQUENCE orders_seq;
DROP SEQUENCE option_seq;
DROP SEQUENCE cart_seq;
DROP SEQUENCE order_detail_seq;
DROP SEQUENCE wishlist_seq;
DROP SEQUENCE attachment_seq;
DROP SEQUENCE category_seq;

-- 2. DROP TABLES (FK 역순)
DROP TABLE product_category_map CASCADE CONSTRAINTS;
DROP TABLE order_detail CASCADE CONSTRAINTS;
DROP TABLE cart CASCADE CONSTRAINTS;
DROP TABLE wishlist CASCADE CONSTRAINTS;
DROP TABLE product_option CASCADE CONSTRAINTS;
DROP TABLE orders CASCADE CONSTRAINTS;
DROP TABLE review CASCADE CONSTRAINTS;
DROP TABLE product CASCADE CONSTRAINTS;
DROP TABLE attachment CASCADE CONSTRAINTS;
DROP TABLE category CASCADE CONSTRAINTS;
DROP TABLE member CASCADE CONSTRAINTS;

-- 3. CREATE TABLES & SEQUENCES

-- 3.1. member (CHECK 제약조건 포함)
CREATE TABLE member (
    member_id VARCHAR2(20) PRIMARY KEY,
    member_pw VARCHAR2(16) NOT NULL,
    member_nickname VARCHAR2(30) NOT NULL UNIQUE,
    member_birth CHAR(10),
    member_contact CHAR(11),
    member_email VARCHAR2(60) NOT NULL,
    member_level VARCHAR2(12) DEFAULT '일반회원' NOT NULL,
    member_point NUMBER DEFAULT 0 NOT NULL,
    member_post VARCHAR2(6),
    member_address1 VARCHAR2(300),
    member_address2 VARCHAR2(300),
    member_join TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    member_login TIMESTAMP,
    member_change TIMESTAMP,
    member_profile_no NUMBER,
    
    -- Member CHECK Constraints
    check(regexp_like(member_id, '^[a-z][a-z0-9]{4,19}$')),
    check(
        regexp_like(member_pw, '^[A-Za-z0-9\!\@\#\$]{8,16}$')
        and
        regexp_like(member_pw, '[A-Z]+')
        and
        regexp_like(member_pw, '[a-z]+')
        and
        regexp_like(member_pw, '[0-9]+')
        and
        regexp_like(member_pw, '[\!\@\#\$]+')
    ),
    check(regexp_like(member_nickname, '^[가-힣0-9]{2,10}$')),
    check(regexp_like(member_birth, '^(19[0-9]{2}|20[0-9]{2})-((02-(0[1-9]|1[0-9]|2[0-9]))|((0[469]|11)-(0[1-9]|1[0-9]|2[0-9]|30))|((0[13578]|1[02])-(0[1-9]|1[0-9]|2[0-9]|3[01])))$')),
    check(regexp_like(member_contact, '^010[1-9][0-9]{7}$')),
    check(regexp_like(member_email, '[A-Za-z0-9_-]+@[A-Za-z0-9_-]+')),
    check(member_level in ('일반회원', '우수회원', '관리자')),
    check(member_point >= 0),
    check(regexp_like(member_post, '^[0-9]{5,6}$')),
    check(
        (member_post is null and member_address1 is null and member_address2 is null) 
        or 
        (member_post is not null and member_address1 is not null and member_address2 is not null)
    )
);
CREATE SEQUENCE member_seq;
COMMIT;

-- 3.2. category
CREATE TABLE category (
    category_no NUMBER PRIMARY KEY,
    category_name VARCHAR2(100) NOT NULL UNIQUE,
    parent_category_no NUMBER,
    CONSTRAINT fk_category_parent FOREIGN KEY (parent_category_no) 
        REFERENCES category(category_no),
    
    -- Category CHECK Constraints
    check(category_no != parent_category_no)
);
CREATE SEQUENCE category_seq;
COMMIT;

-- 3.3. attachment (FK 제외하고 생성)
CREATE TABLE attachment (
    attachment_no NUMBER PRIMARY KEY,
    attachment_name VARCHAR2(255) NOT NULL,
    attachment_size NUMBER NOT NULL,
    attachment_type VARCHAR2(100) NOT NULL,
    attachment_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    product_no NUMBER,
    review_no NUMBER,
    
    -- Attachment CHECK Constraints
    check(attachment_size > 0)
);
CREATE SEQUENCE attachment_seq;
COMMIT;

-- 3.4. product
CREATE TABLE product (
    product_no NUMBER PRIMARY KEY,
    product_name VARCHAR2(90) NOT NULL,
    product_price NUMBER NOT NULL,
    product_content VARCHAR2(4000) NOT NULL,
    product_thumbnail_no NUMBER,
    CONSTRAINT fk_product_thumbnail FOREIGN KEY (product_thumbnail_no) 
        REFERENCES attachment(attachment_no),
        
    -- Product CHECK Constraints
    check(product_price >= 0)
);
CREATE SEQUENCE product_seq;
COMMIT;

-- 3.5. review
CREATE TABLE review (
    review_no NUMBER PRIMARY KEY,
    product_no NUMBER NOT NULL,
    member_id VARCHAR2(20) NOT NULL,
    review_content VARCHAR2(4000) NOT NULL,
    review_rating NUMBER(1) NOT NULL,
    review_created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT fk_review_product FOREIGN KEY (product_no) 
        REFERENCES product(product_no),
    CONSTRAINT fk_review_member FOREIGN KEY (member_id) 
        REFERENCES member(member_id),
        
    -- Review CHECK Constraints
    check(review_rating between 1 and 5)
);
CREATE SEQUENCE review_seq;
COMMIT;

-- 3.6. orders
CREATE TABLE orders (
    orders_no NUMBER PRIMARY KEY,
    orders_id VARCHAR2(20),
    orders_totalPrice NUMBER,
    orders_recipient VARCHAR2(60),
    orders_recipientContact CHAR(11),
    orders_shippingPost VARCHAR2(6),
    orders_shippingAddress1 VARCHAR2(300),
    orders_shippingAddress2 VARCHAR2(300),
    orders_status VARCHAR2(60),
    CONSTRAINT fk_orders_member FOREIGN KEY (orders_id) 
        REFERENCES member(member_id),
        
    -- Orders CHECK Constraints
    check(orders_totalPrice >= 0),
    check(regexp_like(orders_recipientContact, '^010[1-9][0-9]{7}$')),
    check(regexp_like(orders_shippingPost, '^[0-9]{5,6}$')),
    check(orders_status in ('결제완료', '배송준비중', '배송중', '배송완료', '주문취소', '반품완료', '취소요청', '반품요청'))
);
CREATE SEQUENCE orders_seq;
COMMIT;

-- 3.7. product_option
CREATE TABLE product_option (
    option_no NUMBER PRIMARY KEY,
    product_no NUMBER NOT NULL,
    option_name VARCHAR2(30) NOT NULL,
    option_value VARCHAR2(30) NOT NULL,
    option_stock NUMBER NOT NULL,
    CONSTRAINT fk_option_product FOREIGN KEY (product_no) 
        REFERENCES product(product_no),
        
    -- Product_Option CHECK Constraints
    check(option_stock >= 0)
);
CREATE SEQUENCE option_seq;
COMMIT;

-- 3.8. wishlist
CREATE TABLE wishlist (
    wishlist_no NUMBER PRIMARY KEY,
    member_id VARCHAR2(20) NOT NULL,
    product_no NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT unique_wishlist UNIQUE(member_id, product_no),
    CONSTRAINT fk_wishlist_member FOREIGN KEY (member_id) 
        REFERENCES member(member_id),
    CONSTRAINT fk_wishlist_product FOREIGN KEY (product_no) 
        REFERENCES product(product_no)
);
CREATE SEQUENCE wishlist_seq;
COMMIT;

-- 3.9. cart
CREATE TABLE cart (
    cart_no NUMBER PRIMARY KEY,
    member_id VARCHAR2(20) NOT NULL,
    product_no NUMBER NOT NULL,
    option_no NUMBER NOT NULL,
    amount NUMBER DEFAULT 1 NOT NULL,
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT fk_cart_member FOREIGN KEY (member_id) 
        REFERENCES member(member_id),
    CONSTRAINT fk_cart_product FOREIGN KEY (product_no) 
        REFERENCES product(product_no),
    CONSTRAINT fk_cart_option FOREIGN KEY (option_no) 
        REFERENCES product_option(option_no),
        
    -- Cart CHECK Constraints
    check(amount > 0)
);
CREATE SEQUENCE cart_seq;
COMMIT;

-- 3.10. order_detail
CREATE TABLE order_detail (
    order_detail_no NUMBER PRIMARY KEY,
    order_no NUMBER NOT NULL,
    product_no NUMBER NOT NULL,
    option_no NUMBER NOT NULL,
    amount NUMBER DEFAULT 1 NOT NULL,
    price_per_item NUMBER NOT NULL,
    CONSTRAINT fk_detail_order FOREIGN KEY (order_no) 
        REFERENCES orders(orders_no),
    CONSTRAINT fk_detail_product FOREIGN KEY (product_no) 
        REFERENCES product(product_no),
    CONSTRAINT fk_detail_option FOREIGN KEY (option_no) 
        REFERENCES product_option(option_no),
        
    -- Order_Detail CHECK Constraints
    check(amount > 0),
    check(price_per_item >= 0)
);
CREATE SEQUENCE order_detail_seq;
COMMIT;

-- 3.11. product_category_map (M:N)
CREATE TABLE product_category_map (
    product_no NUMBER NOT NULL,
    category_no NUMBER NOT NULL,
    CONSTRAINT pk_product_category_map PRIMARY KEY (product_no, category_no),
    CONSTRAINT fk_map_product FOREIGN KEY (product_no) 
        REFERENCES product(product_no),
    CONSTRAINT fk_map_category FOREIGN KEY (category_no) 
        REFERENCES category(category_no)
);
COMMIT;

-- 4. ALTER TABLES (순환 참조 FKs 추가)
ALTER TABLE member 
    ADD CONSTRAINT fk_member_profile 
    FOREIGN KEY (member_profile_no) REFERENCES attachment(attachment_no);

ALTER TABLE attachment 
    ADD CONSTRAINT fk_attach_product 
    FOREIGN KEY (product_no) REFERENCES product(product_no);

ALTER TABLE attachment 
    ADD CONSTRAINT fk_attach_review 
    FOREIGN KEY (review_no) REFERENCES review(review_no);
COMMIT;
